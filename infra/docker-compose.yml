# infra/docker-compose.yml
version: "3.9"
name: data-stack

x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

networks:
  internal:
    driver: bridge

volumes:
  pg-data:
  minio-data:
  superset-home:
  airflow-logs:

services:
  # ============ BASE ============
  postgres:
    image: postgres:16
    profiles: ["base"]
    restart: unless-stopped
    logging: *default-logging
    env_file: ["../env/.env"]
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    volumes:
      - pg-data:/var/lib/postgresql/data
      # Se tiver scripts de init, mantenha aqui:
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks: [internal]

  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z-cpuv1
    profiles: ["base"]
    restart: unless-stopped
    logging: *default-logging
    env_file: ["../env/.env"]
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks: [internal]

  # opcional: faz alias/config inicial no MinIO
  minio-mc:
    image: minio/mc:latest
    profiles: ["base"]
    restart: "no"
    logging: *default-logging
    env_file: ["../env/.env"]
    depends_on:
      minio: { condition: service_started }
    entrypoint: >
      sh -c '
      set -eu;
      for i in $$(seq 1 30); do
        mc alias set local http://minio:9000 "$$MINIO_ROOT_USER" "$$MINIO_ROOT_PASSWORD" && exit 0 || sleep 2;
      done;
      echo "MinIO not ready" >&2; exit 1
      '
    networks: [internal]

  # ============ ANALYTICS ============
  superset:
    image: apache/superset:4.0.2
    profiles: ["analytics"]
    restart: unless-stopped
    logging: *default-logging
    env_file: ["../env/.env"]
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://${PG_USER}:${PG_PASSWORD}@postgres:5432/superset
    depends_on:
      postgres: { condition: service_healthy }
    volumes:
      - superset-home:/app/superset_home
      - ./superset/superset_config.py:/app/pythonpath/superset_config.py:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [internal]

  # ============ ORCHESTRATOR ============
  airflow:
    build:
      context: ../airflow        # <-- seu Dockerfile/requirements/airflowsetting.json estão aqui
    image: data-stack-airflow
    profiles: ["orchestrator"]
    restart: unless-stopped
    logging: *default-logging
    env_file: ["../env/.env"]
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__DEFAULT_TIMEZONE: America/Sao_Paulo

      # atrás do Nginx em /airflow
      AIRFLOW__WEBSERVER__WEB_SERVER_PORT: "8080"
      AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: "True"
      AIRFLOW__WEBSERVER__WEB_SERVER_URL_PREFIX: /airflow
      AIRFLOW__WEBSERVER__BASE_URL: http://10.113.120.154/airflow

      # metastore do Airflow (usa DB airflow que você criou)
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${PG_USER}:${PG_PASSWORD}@postgres:5432/airflow

      # conexão para DAGs (seus DAGs podem usar: conn_id="warehouse")
      AIRFLOW_CONN_WAREHOUSE: postgresql+psycopg2://${PG_USER}:${PG_PASSWORD}@postgres:5432/${PG_DB}
    depends_on:
      postgres: { condition: service_healthy }
    volumes:
      - airflow-logs:/opt/airflow/logs
      # se quiser mapear DAGs de fora, descomente e crie ../airflow/dags:
      # - ../airflow/dags:/opt/airflow/dags:ro
    command: >
      bash -lc "
        airflow db upgrade &&
        airflow users create --username admin --password ${AIRFLOW_ADMIN_PWD:-admin} --firstname A --lastname D --role Admin --email admin@local || true &&
        airflow webserver --port 8080 & airflow scheduler
      "
    networks: [internal]

  # ============ MONITORING ============
  prometheus:
    image: prom/prometheus:v2.55.1
    profiles: ["monitoring"]
    restart: unless-stopped
    logging: *default-logging
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks: [internal]

  node_exporter:
    image: prom/node-exporter:v1.8.2
    profiles: ["monitoring"]
    restart: unless-stopped
    logging: *default-logging
    networks: [internal]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    profiles: ["monitoring"]
    restart: unless-stopped
    logging: *default-logging
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks: [internal]

  # ============ PROXY ============
  nginx:
    image: nginx:1.27
    profiles: ["proxy"]
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - superset
      - airflow
      - minio
      - prometheus
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks: [internal]
